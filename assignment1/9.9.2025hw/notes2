# AWSCLI Nana Devops

AWS Command line tool is a powerful command line tool
You can do anything you can do on the UI
This is a much faster way to provision things in AWS
>install awscli mac: $brew install awscli
>windows: google awscli and follow windows install directions
You must configure aws in cli with $aws configure
aws_access_key, secret_access_key
then select closest region to you
Then default output should be json
credentials stored ~/.aws/credentials

command for running ec2 instance:
$aws ec2 run-instances
    --image-id ami-xxxxxxx
    --count 1
    --instance-type t2.micro
    --key-name mykeyPair
    --security-group-ids sg-xxxxxxx
    --subnet-id subnet-xxxxxx

list security groups:
    $aws ec2 describe-security-groups
create security group:
    $aws ec2 create-security-group --group-name my-sg --description "My SG" --vpc-id vpc-xxxxxxx
   $aws ec2 authorize-security-group-ingress\
    --group-id sg-xxxxxxx\
    --protocol tcp\
    --port22\
    --cidr 01.23.45.67/32
create keypair:
    $aws ec2 create-key-pair\
    --key-name MyKpCli\
    --query 'KeyMaterial'\
    --output text > MyKpCli.pem

Get subnet id:
    $aws ec2 describe subnets
Get ami:
$?   (you can also grab from UI)

list vpcs:
    ec2 describe-vpcs
------------------------------------------------------------
------------------------------------------------------------

#AWScli 2 Nana Devops

with aws describe you can filter results
filter picks out specific components
querying picks specific attributes of the components
$aws ec2 describe-instances --filters "Name=instance-state-name,Values=t2.micro" --query "Reservations[*].Instances[*].[InstanceId,State.Name,Tags[?Key=='Name'].Value|[0],PrivateIpAddress,PublicIpAddress]" --output table
$aws ec2 descibe-instances --filters "Name=image-id,Values=ami-xxxxxx,ami-xxxxxx"


AWS IAM Commands
create group:
$aws iam create-group --group-name MyGroupCli 
(you get a json output with the group details)

create user:
$aws iam create-user --user-name MyUserCli
(you get a json output with the user details)

add user to group:
$aws iam add-user-to-group --user-name MyUserCli --group-name MyGroupCli
(you get no output if successful)

list groups:
$aws iam list-groups
(you get a json output with the group details)

list users:
$aws iam list-users
(you get a json output with the user details)

list users in group:
$aws iam get-group --group-name MyGroupCli
(you get a json output with the user details)

attach policy to group:
$aws iam attach-group-policy --group-name MyGroupCli --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess
(you get no output if successful)

list policies:
$aws iam list-policies --query 'Policies[?PolicyName==`AmazonEC2FullAccess`].Arn' --output text
arn:aws:iam::aws:policy/AmazonEC2FullAccess
(you get a json output with the policy details)

list user policies:
$aws iam list-attached-user-policies --user-name MyUserCli
(you get a json output with the policy details)

list group policies:
$aws iam list-attached-group-policies --group-name MyGroupCli
(you get a json output with the policy details)

Creating credentials for user:
    password for console access
$aws iam create-login-profile --user-name MyUserCli --password MyPasswordCli1! --password-reset-required
(you get a json output with the login profile details)

    access keys for programmatic access
$aws iam create-access-key --user-name MyUserCli
(you get a json output with the access key details)

Creating policy to assign to a group:
$aws iam create-policy --policy-name MyPolicyCli --policy-document file://my-policy.json 
(you need to create the my-policy.json file) 
(you get a json output with the policy details)

changing iam user:




